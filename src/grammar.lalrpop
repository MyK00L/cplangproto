use crate::ast::Ast;

grammar;

// skip comments
match {
	r"\s*" => { }, // whitespace
	r"//[^\n\r]*[\n\r]*" => { }, // `// comments`
	r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/" => { },  // `/* comments */`
	_
}

// utilities

// list of any amount of comma separated rules
CommaList0<Rule>: Vec<Rule> =
<rules: (<Rule> ",")*> <last: Rule?> => {
	let mut rules = rules;
	rules.extend(last);
	rules
};
// list of at least 1 comma separated rules
CommaList1<Rule>: Vec<Rule> =
<rules: (<Rule> ",")*> <last: Rule> (",")? => {
	let mut rules = rules;
	rules.push(last);
	rules
};

// number
NumLiteral: Box<Ast> = {
	r"[0-9]+" => Box::new(Ast::NumLiteral(String::from(<>))),
}
Literal: Box<Ast> = {
	NumLiteral => <>,
}

// variable or function or type names
Id: Box<Ast> = {
	r"[A-Za-z_][A-Za-z0-9_]*" => Box::new(Ast::Id(String::from(<>))),
}

// template struct declaration
TempTyp: Box<Ast> = {
	<a:Id> "!" "(" <t:CommaList0<Expr>> ")" => Box::new(Ast::Template{args:t,body:a}),
}
// array (cant have same syntax as indexing)
Array: Box<Ast> = {
	"[" <a:Typ> ";" <b:Expr> "]" => Box::new(Ast::Array{typ:a,size:b}),
}
// pointer
Pointer: Box<Ast> = {
	<a:Typ> "ptr" => Box::new(Ast::Pointer{typ:a}),
}
// types
Typ: Box<Ast> = {
	Id => <>,
	TempTyp => <>,
	Pointer => <>,
	Array => <>,
}

// function definition
FunArgsEl: Box<Ast> = {
	<a:Typ> <b:Id> => Box::new(Ast::FunArgsEl{typ:a,name:b}),
}
Fun: Box<Ast> = {
	"fn" <n:Id> "(" <a:CommaList0<FunArgsEl>> ")" <t:Typ> <b:BraceExpr> => Box::new(Ast::Fun{name:n,args:a,typ:t,body:b}),
	"fn" "!" "(" <template:CommaList1<Id>> ")" <n:Id> "(" <a:CommaList0<FunArgsEl>> ")" <t:Typ> <b:BraceExpr> => Box::new(Ast::Template{args:template,body:Box::new(Ast::Fun{name:n,args:a,typ:t,body:b})}),
}

// structure definition
StructDefEl: Box<Ast> = {
	<a:Typ> <b:Id?> => Box::new(Ast::StructEl{typ:a,name:b}),
}
StructDef: Box<Ast> = {
	"struct" <n:Id> "{" <e:CommaList0<StructDefEl>> "}" => Box::new(Ast::Struct{name:n,els:e}),
	"struct" "!" "(" <t:CommaList1<Id>> ")" <n:Id> "{" <e:CommaList0<StructDefEl>> "}" => Box::new(Ast::Template{args:t,body:Box::new(Ast::Struct{name:n,els:e})}),
}

// variable declaration, simplified for now bc of commas
VariableDeclaration: Box<Ast> = {
	<a:Typ> <b:Id> => Box::new(Ast::Var{typ:a,name:b}),
}

// control flow stuff
Break: Box<Ast> = {
	"break" <b:(NumLiteral)?> => Box::new(Ast::Break{amount:match b {Some(x) => x, _ => Box::new(Ast::NumLiteral(String::from("1"))), } }),
}
Continue: Box<Ast> = {
	"continue" <b:(NumLiteral)?> => Box::new(Ast::Continue{amount:match b {Some(x) => x, _ => Box::new(Ast::NumLiteral(String::from("1"))), } }),
}
Return: Box<Ast> = {
	"return" <b:Expr7> => Box::new(Ast::Return{returnee:b}),
}

Else: Box<Ast> = {
	"else" <b:LimitedExpr> => b,
}
If: Box<Ast> = {
	"if" <a:LimitedExprNoIf> <b:LimitedExprNoIf> <e:(Else)?> => Box::new(Ast::If{cond:a,then:b,els:e}),
	"if" <a:Expr7> <b:BraceExpr> <e:(Else)?> => Box::new(Ast::If{cond:a,then:b,els:e}),
}
While: Box<Ast> = {
	"while" <a:LimitedExpr> <b:LimitedExpr> => Box::new(Ast::If{cond:a.clone(),then:Box::new(Ast::DoWhile{cond:a,then:b}),els:None}),
	"while" <a:Expr7> <b:BraceExpr> => Box::new(Ast::If{cond:a.clone(),then:Box::new(Ast::DoWhile{cond:a,then:b}),els:None}),
}

// expressions numbered based on priority
Expr20: Box<Ast> = {
	Id => <>,
	Literal => <>,
	ParenExpr => <>,
}
Expr19: Box<Ast> = {
	Expr20 => <>,
	<a:Expr19> "." <b:Expr20> => Box::new(Ast::Access{lhs:a,rhs:b}),
	<a:Expr19> "(" <b:CommaList0<Expr> > ")" => Box::new(Ast::Call{lhs:a,args:b}),
	<a:Expr19> <b:BracketExpr> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("at"))),args:vec![a,b]}),
	<a:Expr19> "++" => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("inc"))),args:vec![a]}),
	<a:Expr19> "--" => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("dec"))),args:vec![a]}),
}
Expr18: Box<Ast> = {
	Expr19 => <>,
	"+" <a:Expr18> => a,
	"-" <a:Expr18> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("neg"))),args:vec![a]}),
	"!" <a:Expr18> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("not"))),args:vec![a]}),
	"~" <a:Expr18> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("bnot"))),args:vec![a]}),
	"&" <a:Expr18> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("ref"))),args:vec![a]}),
	"*" <a:Expr18> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("deref"))),args:vec![a]}),
}
Expr17: Box<Ast> = {
	Expr18 => <>,
	<a:Expr17> "*" <b:Expr18> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("mul"))),args:vec![a,b]}),
	<a:Expr17> "/" <b:Expr18> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("div"))),args:vec![a,b]}),
	<a:Expr17> "%" <b:Expr18> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("mod"))),args:vec![a,b]}),
}
Expr16: Box<Ast> = {
	Expr17 => <>,
	<a:Expr16> "+" <b:Expr17> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("add"))),args:vec![a,b]}),
	<a:Expr16> "-" <b:Expr17> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("sub"))),args:vec![a,b]}),
}
Expr15: Box<Ast> = {
	Expr16 => <>,
	<a:Expr15> ">>" <b:Expr16> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("rhs"))),args:vec![a,b]}),
	<a:Expr15> "<<" <b:Expr16> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("lhs"))),args:vec![a,b]}),
}
Expr14: Box<Ast> = {
	Expr15 => <>,
	<a:Expr14> "<" <b:Expr15> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("less"))),args:vec![a,b]}),
	<a:Expr14> "<=" <b:Expr15> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("less_equal"))),args:vec![a,b]}),
	<a:Expr14> ">" <b:Expr15> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("less"))),args:vec![b,a]}),
	<a:Expr14> ">=" <b:Expr15> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("less_equal"))),args:vec![b,a]}),
}
Expr13: Box<Ast> = {
	Expr14 => <>,
	<a:Expr13> "==" <b:Expr14> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("equal"))),args:vec![a,b]}),
	<a:Expr13> "!=" <b:Expr14> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("nequal"))),args:vec![a,b]}),
}
Expr12: Box<Ast> = {
	Expr13 => <>,
	<a:Expr12> "&" <b:Expr13> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("band"))),args:vec![a,b]}),
}
Expr11: Box<Ast> = {
	Expr12 => <>,
	<a:Expr11> "^" <b:Expr12> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("bxor"))),args:vec![a,b]}),
}
Expr10: Box<Ast> = {
	Expr11 => <>,
	<a:Expr10> "|" <b:Expr11> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("bor"))),args:vec![a,b]}),
}
Expr9: Box<Ast> = {
	Expr10 => <>,
	<a:Expr9> "&&" <b:Expr10> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("and"))),args:vec![a,b]}),
}
Expr8: Box<Ast> = {
	Expr9 => <>,
	<a:Expr8> "||" <b:Expr9> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("or"))),args:vec![a,b]}),
}
Expr7: Box<Ast> = {
	Expr8 => <>,
	<a:Expr8> "=" <b:Expr7> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("assign"))),args:vec![a,b]}),
	<a:Expr8> "+=" <b:Expr7> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("assign"))),args:vec![a.clone(),Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("add"))),args:vec![a,b]})]}),
	<a:Expr8> "-=" <b:Expr7> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("assign"))),args:vec![a.clone(),Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("sub"))),args:vec![a,b]})]}),
	<a:Expr8> "*=" <b:Expr7> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("assign"))),args:vec![a.clone(),Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("mul"))),args:vec![a,b]})]}),
	<a:Expr8> "/=" <b:Expr7> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("assign"))),args:vec![a.clone(),Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("div"))),args:vec![a,b]})]}),
	<a:Expr8> "%=" <b:Expr7> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("assign"))),args:vec![a.clone(),Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("mod"))),args:vec![a,b]})]}),
	<a:Expr8> "<<=" <b:Expr7> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("assign"))),args:vec![a.clone(),Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("lhs"))),args:vec![a,b]})]}),
	<a:Expr8> ">>=" <b:Expr7> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("assign"))),args:vec![a.clone(),Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("rhs"))),args:vec![a,b]})]}),
	<a:Expr8> "&=" <b:Expr7> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("assign"))),args:vec![a.clone(),Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("band"))),args:vec![a,b]})]}),
	<a:Expr8> "^=" <b:Expr7> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("assign"))),args:vec![a.clone(),Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("bxor"))),args:vec![a,b]})]}),
	<a:Expr8> "|=" <b:Expr7> => Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("assign"))),args:vec![a.clone(),Box::new(Ast::Call{lhs:Box::new(Ast::Id(String::from("bor"))),args:vec![a,b]})]}),
}

// ()
ParenExpr: Box<Ast> = {
	"(" <a:Expr> ")" => a,
}
// []
BracketExpr: Box<Ast> = {
	"[" <a:Expr> "]" => a,
}
// {}
BraceExpr: Box<Ast> = {
	"{" <a:Expr> "}" => a,
}

// the expressions after which;
ColonedExpr: Box<Ast> = {
	<a:Expr7> ";" => a,
	<a:VariableDeclaration> ";" => a,
	<a:Break> ";" => a,
	<a:Continue> ";" => a,
	<a:Return> ";" => a,
}

// limited exprs subset for if (so that else is not ambiguous)
LimitedExprNoIf: Box<Ast> = {
	ColonedExpr => <>,
	BraceExpr => <>,
}

// Expression which you can easily find an end to
LimitedExpr: Box<Ast> = {
	ColonedExpr => <>,
	BraceExpr => <>,
	While => <>,
	If => <>,
	Fun => <>,
	StructDef => <>,
}

// Lines that make up the program
Line: Box<Ast> = {
	LimitedExpr => <>,
}

// Program is an Expr
pub Expr: Box<Ast> = {
	<a:(Line)*> <b:Expr7> => Box::new(Ast::Expr{body:a, ret:Some(b)}),
	<a:(Line)+> => Box::new(Ast::Expr{body:a, ret:None}),
}

